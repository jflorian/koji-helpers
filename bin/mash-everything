#!/bin/sh

# Copyright 2016 John Florian <jflorian@doubledog.org>
#
# This file is part of koji-helpers.
#
# koji-helpers is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version so long as this copyright notice remains intact.
#
# koji-helpers is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# koji-helpers.  If not, see <http://www.gnu.org/licenses/>.

SELF=$(basename "$0")

# Set defaults.
REST_SECS=300

# Override per the configuration.
source "/etc/koji-helpers/${SELF}.conf"

# Source the shared function library.
source '/usr/libexec/koji-helpers/_shared'

# Other constants.
MASHES_CONF='/etc/koji-helpers/mashes.conf'
MASH_DIR="/tmp/mash"
COMPOSITE_DIR="${MASH_DIR}/composite"


ensure_composite_dir() {
    # Ensure the repository composition directory exists and is as expected.
    local dir="$1"
    local wipe="${2:-do_not_wipe}"
    local what="repository composition directory '${dir}'"
    if [ "$wipe" = wipe ]
    then
        if rm -rf "$dir"
        then
            notice "Wiped ${what}."
        else
            fail "Could not wipe ${what}."
        fi
    fi
    if [ ! -d "$dir" ]
    then
        if mkdir -p "$dir"
        then
            notice "Created ${what}."
        else
            fail "Could not create ${what}."
        fi
    fi
}

clone_into_composite_dir() {
    # Composite one repository directory.
    local repo="$1"
    local clone="$2"
    [ -L "$clone" ] && return
    [ -e "$clone" ] \
            && fail "Composite clone '${clone}' exists, but is not a symlink."
    ensure_composite_dir "$(dirname "$clone")"
    if ln -s "${MASH_DIR}/${repo}" "$clone"
    then
        debug "Created composite clone '${clone}'."
    else
        fail "Could not create composite clone '${clone}'."
    fi
}

mash_all_repositories() {
    # Iterate over each listed mash configuration and composite them.
    local repo comp_dir clone
    info 'Started mashing all repositories.'
    config_lines $MASHES_CONF | while IFS=: read repo comp_dir
    do
        debug "Mashing '${repo}'."
        # sed is used to squash the time stamp that mash logs with which would
        # be redundant to our own; mashing logging is not configurable
        ( mash -o "$MASH_DIR" "$repo" || fail 'mash failed; aborting' ) \
            | sed -r 's/^[0-9]{4}(-[0-9]{2}){2} ([0-9]{2}:){2}[0-9]{2} //'
        clone="${COMPOSITE_DIR}/${comp_dir}"
        debug "Cloning into '${clone}'."
        clone_into_composite_dir "$repo" "$clone"
    done
    info 'Finished mashing all repositories.'
}

sync_repo_tree() {
    # rsync the repository composition directory to the public area.  This
    # actually accomplishes several non-obvious goals:
    #   - Symlinks at the source are expanded and normalized so that whatever
    #   may be exposing the public area needn't traverse any links.
    #   - Owner/group attributes can be adjusted to be appropriate for
    #   exposing which may differ from what Koji presents.
    #   - Disruption to the public area is minimized.  Remember that mash
    #   itself completely erases a repository and its meta-data before
    #   rebuilding it.
    info 'Started synchronizing repository tree.'
    # It is critical that origin and target end with a slash.
    local origin="${COMPOSITE_DIR}/"
    local target="${REPO_DIR}/"
    rsync \
        --archive \
        --copy-links \
        --delay-updates \
        --delete \
        --delete-delay \
        --exclude=lost+found/ \
        --exclude=/*/repoview/ \
        --no-group \
        --no-owner \
        --stats \
        "$origin" "$target" \
            || fail "Could not synchronize repository tree from '${origin}' to '${target}'."
    info 'Finished synchronizing repository tree.'
}

main() {
    [ -n "$TOP_DIR" ] \
        || fail 'TOP_DIR must be configured.'
    [ -n "$REPO_DIR" ] \
        || fail 'REPO_DIR must be configured.'
    while :
    do
        ensure_composite_dir "$COMPOSITE_DIR" wipe
        mash_all_repositories
        sync_repo_tree
        debug "Resting for ${REST_SECS} seconds."
        sleep $REST_SECS
    done
}

main "$@"
