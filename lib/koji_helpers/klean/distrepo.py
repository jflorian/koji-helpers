# coding=utf-8

# Copyright 2016-2019 John Florian <jflorian@doubledog.org>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of koji-helpers.
#
# koji-helpers is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version so long as this copyright notice remains intact.
#
# koji-helpers is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# koji-helpers.  If not, see <http://www.gnu.org/licenses/>.
import os
import shutil
from logging import getLogger

from koji_helpers.config import Configuration
from koji_helpers.koji import LATEST, REPOS_DIST

__author__ = """John Florian <jflorian@doubledog.org>"""
__copyright__ = """2016-2019 John Florian"""

_log = getLogger(__name__)


class DistRepoCleaner(object):
    """
    A garbage collector for older dist-repos generated by Koji.

    Koji's dist-repo feature creates entirely new repositories each time.
    The only thing that gets replaced or updated is a "latest" symlink.
    Meanwhile, any repo that is no longer the "latest" is old cruft.  This
    cleaner will constrain the amount of cruft that is retained.
    """

    def __init__(
            self,
            config: Configuration,
    ):
        """
        Initialize the DistRepoCleaner object.
        """
        self.config = config
        self.run()

    def __repr__(self) -> str:
        return (f'{self.__module__}.{self.__class__.__name__}('
                f'config={self.config!r}, '
                f')')

    def __str__(self) -> str:
        return f'{self.__class__.__name__}'

    def run(self):
        """Purge old package repositories for each tag."""
        _log.info(f'{self} started')
        if self.config.klean_koji_dir is None:
            raise ValueError('klean/koji_dir is not configured')
        # Using smashd's repo names as dist tags here.
        for self._tag in self.config.repos:
            d = os.path.join(self.config.klean_koji_dir, REPOS_DIST, self._tag)
            _log.debug(f'searching for old dist-repos under directory {d!r}')
            try:
                os.chdir(d)
            except FileNotFoundError:
                _log.info(f'no dist-repos for tag {self._tag!r}')
                continue
            repos = list(filter(os.path.isdir, os.listdir(d)))
            try:
                repos.remove(LATEST)
            except ValueError:
                _log.info(f'no {LATEST!r} dist-repo for tag {self._tag!r}')
                continue
            repos.sort(key=os.path.getmtime)
            _log.debug(f'discovered {repos!r}')
            keep = 3
            cruft = repos[:-keep]
            _log.debug(f'retaining {set(repos) - set(cruft)}')
            if cruft:
                for repo in cruft:
                    _log.info(
                        f'purging old dist-repo '
                        f'{os.path.join(self._tag, repo) !r}'
                    )
                    shutil.rmtree(repo)
            else:
                _log.info(f'no old dist-repos for tag {self._tag!r}')
        _log.info(f'{self} completed')
